int hlo(string s, int p) {
    int count = 0;  // Initially, the count of distinct characters is 0
    int i = 0;      // Start pointer for the sliding window
    int j = 0;      // End pointer for the sliding window
    int n = s.length();  // Length of the string
    int ans = 0;    // Variable to store the number of valid substrings
    vector<int> a(256, 0);  // Frequency array to count occurrences of characters

    // Sliding window approach
    while (j < n) {
        // If the current character is distinct, increase the count
        if (a[s[j] - '0'] == 0)
            count++;
        
        // Increment the frequency of the current character
        a[s[j] - '0']++;

        // If the count of distinct characters exceeds 'p', shrink the window from the left
        while (count > p) {
            a[s[i] - '0']--;  // Decrease the frequency of the character at the left pointer
            if (a[s[i] - '0'] == 0)
                count--;  // If the frequency becomes 0, reduce the count of distinct characters
            i++;  // Move the left pointer to shrink the window
        }

        // Add the number of valid substrings with the current window to the result
        ans += j - i + 1;
        j++;  // Move the right pointer to extend the window
    }
    
    return ans;  // Return the total count of valid substrings
}

int countSubstr(string s, int p) {
    // Calculate the difference between the number of substrings with at most 'p' distinct characters
    // and the number of substrings with at most 'p-1' distinct characters
    return hlo(s, p) - hlo(s, p - 1);
}
